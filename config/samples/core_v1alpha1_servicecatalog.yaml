apiVersion: core.launchboxhq.io/v1alpha1
kind: ServiceCatalog
metadata:
  labels:
    app.kubernetes.io/name: servicecatalog
    app.kubernetes.io/instance: servicecatalog-sample
    app.kubernetes.io/part-of: app
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/created-by: app
  name: servicecatalog-sample
spec:
  defaults:
    # Can be set to one of 'git', 'git+helm', 'helm', or 'terraform'
    # 'git' will clone and build the project as specified
    # 'git+helm' will pull the project, and then install the chart at the specified helm path
    # 'helm' will install a chart directly from the specified repository
    # 'terraform' will grab the module, initialize the state file, apply and save the state
    # 'git+terraform' will clone the project, access the module, and apply as above
    provider: git
    git:
      host: github.com

  spaceId: space-sample
  repos:
    - name: bitnami
      url: https://charts.bitnami.com/bitnami
  addons:
    - provider: helm
      repo: bitnami
      chart: redis
      version: 7.0.7
      namespace: default
      name: redis
      values: |
        architecture: standalone
        auth:
          enabled: true
        master:
          count: 1
        rbac:
          create: true
      output:
        REDIS_URL: redis://:{{ .Secret.redis.Data.redis-password }}@{{ .Service.redis.name }}.{{ .Service.redis.namespace }}:6380
    - provider: helm
      repo: bitnami
      chart: mysql
      version: ""
      namespace: default
      name: mysql
      values: |
        architecture: standalone
        auth:
          database: launchboxhq
          username: launchboxhq
      outputs:
        DATABASE_URL: mysql://{{.Helm.Values.auth.username}}:{{.Secret.mysql.Data.mysql-password }}@{{ .Service.mysql.name }}.{{ .Service.mysql.namespace }}:3306/{{ .Helm.Values.auth.database }}
    - provider: 'git+terraform'
      name: terraform_database
      variables:
        database_name: launchbox
        database_user: launchbox
      # Any outputs exposed by the module, are exposed to callers
      # outputs: {}
  services:
    # Example installing directly from a helm chart, which can then be overriden
    - name: echo-server
      provider: helm
      helm:
        repo: https://ealenn.github.io/charts
        chart: echo-server
        namespace: default
        # We can reference the outputs directly in our values file (which is pre-processed)
        # Also, the .Helm, .Service, and .Secret attributes are accessible as well
        values: |
          env:
            DATABASE_URL: {{ .Addons.mysql.Outputs.DATABASE_URL }}
            REDIS_URL: {{ .Addons.mysql.Outputs.REDIS_URL }}

          redis:
            clusterSize: {{ .Addons.redis.Helm.Values.master.count }}
      # Can be one of 'env', 'secret', or 'vault' if set
      # 'env' will attach the environment variables to any pods for the service
      # 'secret' will generate an aggregate secret for the service, and attach that to the pods
      # 'vault' will push the data to Vault, and then configure vault mechanisms to retrieve it
      credentials: env
      # By adding `mysql` and `redis` addons, we should see the outputs added appropriately
      addons:
        - mysql
        - redis

    # Example using git+helm to pull
    - name: git-helm-test
      provider: 'git+helm'
      git:
        repository: github.com/organization/my-test-project
        branch: main
      helm:
        path: deploy/charts/my-test-project
        # We can reference the outputs directly in our values file (which is pre-processed)
        # Also, the .Helm, .Service, and .Secret attributes are accessible as well
        values: |
          env:
            DATABASE_URL: {{ .Addons.mysql.Outputs.DATABASE_URL }}
      addons:
        - mysql